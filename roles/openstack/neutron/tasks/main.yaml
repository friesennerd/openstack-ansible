---
- name: Create database {{ neutron_database }}
  mysql_db:
    name: "{{ neutron_database }}"
    login_user: "{{ database_user }}"
    login_password: "{{ database_pass }}"
    login_unix_socket: "{{ database_socket }}"
    state: present

- name: Grant User {{ neutron_database_user }} All Privileges on {{ neutron_database }}
  mysql_user:
    name: "{{ neutron_database_user }}"
    password: "{{ neutron_database_pass }}"
    priv: "{{ neutron_database_privs }}"
    host: "{{ item }}"
    login_user: "{{ database_user }}"
    login_password: "{{ database_pass }}"
    login_unix_socket: "{{ database_socket }}"
  with_items:
  - localhost
  - '%'
  - "{{ database_host }}"

- name: Get Database Dir Informations
  stat:
    path: "{{ database_dir }}/{{ neutron_database }}"
  register: neutron_db_dir

- name: Install components
  package:
    name: "{{ neutron_packages }}"
    state: present

- name: Modprobe br_netfilter
  modprobe:
    name: br_netfilter
    state: present

- name: Make br_netfilter persistent
  copy:
    src: files/etc/modules-load.d/modules.conf
    dest: /etc/modules-load.d/modules.conf

- name: Prepare Network for Kubernetes
  sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
  with_items:
  - net.bridge.bridge-nf-call-iptables
  - net.bridge.bridge-nf-call-ip6tables

- name: Make sure {{ nova_conf_dir }} exists
  file:
    path: "{{ nova_conf_dir }}"
    state: directory
    recurse: true

- name: Make sure {{ neutron_conf_dir }} exists
  file:
    path: "{{ neutron_conf_dir }}"
    state: directory
    recurse: true

- name: Configure Metadata Agent
  template:
    src: '{{ item.src }}'
    dest: "/etc/neutron/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: '{{ role_path }}/templates/etc/neutron'
  when: item.state == 'file'
  notify:
  - restart neutron

- name: Configure ML2-Plugin
  template:
    src: '{{ item.src }}'
    dest: "/etc/neutron/plugins/ml2/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: '{{ role_path }}/templates/etc/neutron/plugins/ml2'
  when: item.state == 'file'

- name: Configure Nova
  template:
    src: '{{ item.src }}'
    dest: "{{ nova_conf_dir }}/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: '{{ role_path }}/templates/etc/nova/nova.conf.d'
  when: item.state == 'file'
  notify:
  - restart openstack-nova-api

- name: Configure Neutron
  template:
    src: '{{ item.src }}'
    dest: "{{ neutron_conf_dir }}/{{ item.path | regex_replace('\\.j2$', '') }}"
  with_filetree: '{{ role_path }}/templates/etc/neutron/neutron.conf.d'
  when: item.state == 'file'
  #  notify:
  #  - restart openstack-nova-api

- name: Link ml2 Plugin
  file:
    src: "{{ neutron_ml2_plugin_path }}"
    dest: /etc/neutron/plugin.ini
    state: link

- name: Populate the Neutron service database
  command: neutron-db-manage --config-dir {{ neutron_conf_dir }} --config-file {{ neutron_ml2_plugin_path }} upgrade head
  become_user: "{{ neutron_user }}"
  become: true
  when: neutron_db_dir.stat.blocks == 0

- name: Enable Network Services for Controller
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
  - neutron-linuxbridge-agent
  - neutron-dhcp-agent
  - neutron-metadata-agent
  - neutron-l3-agent
  when: "'controller_hosts' in group_names"
